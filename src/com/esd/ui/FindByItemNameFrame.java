/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FindByItemNameFrame.java
 *
 * Created on Jul 19, 2011, 8:21:29 AM
 */
package com.esd.ui;

import com.esd.control.ItemManager;
import com.esd.control.ItemManagerImpl;
import com.esd.pojo.Items;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Duminda
 */
public class FindByItemNameFrame extends javax.swing.JFrame {

    private Vector<Items> itemLists;
    ItemManager itemManager;
    private boolean isItemAdd = true;
    private Vector itemColumns;
    private MainJFrame mainJFrame;

    /** Creates new form FindByItemNameFrame */
    public FindByItemNameFrame(MainJFrame mainJFrame) {
        initComponents();

        itemManager = new ItemManagerImpl();
        itemColumns = new Vector();
        itemColumns.addElement("Item Name");
        itemColumns.addElement("Item Code");
        itemColumns.addElement("Sales Price");
        itemColumns.addElement("Item Type");

        this.mainJFrame = mainJFrame;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        noOfItemsTf = new javax.swing.JTextField();
        addItemBtn = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        itemNameTF = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        fndItemsTable = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Find Items");
        setAlwaysOnTop(true);

        jLabel4.setText("No Of Items");

        noOfItemsTf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noOfItemsTfActionPerformed(evt);
            }
        });
        noOfItemsTf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                noOfItemsTfKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                noOfItemsTfKeyReleased(evt);
            }
        });

        addItemBtn.setText("Add Item to Invoice");
        addItemBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addItemBtnActionPerformed(evt);
            }
        });

        jLabel6.setText("Item Name");

        itemNameTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemNameTFActionPerformed(evt);
            }
        });
        itemNameTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                itemNameTFKeyReleased(evt);
            }
        });

        fndItemsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Name", "Item Code", "Sales Price", "Item Type"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Double.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        fndItemsTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                fndItemsTableKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(fndItemsTable);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel6)
                        .addGap(68, 68, 68)
                        .addComponent(itemNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addGap(59, 59, 59)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addItemBtn)
                            .addComponent(noOfItemsTf, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 713, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(itemNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(noOfItemsTf, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addComponent(addItemBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jMenu1.setText("File");

        jMenuItem1.setText("Exit");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addItemBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addItemBtnActionPerformed
        addItemToInvoice();
    }//GEN-LAST:event_addItemBtnActionPerformed

    private void noOfItemsTfKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_noOfItemsTfKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_noOfItemsTfKeyPressed

    private void noOfItemsTfKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_noOfItemsTfKeyReleased
        
    }//GEN-LAST:event_noOfItemsTfKeyReleased

    private void itemNameTFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_itemNameTFKeyReleased

        char keyChar = evt.getKeyChar();

        Character keyCharObj = new Character(keyChar);

        String typedValue = itemNameTF.getText();


        Vector typedItemList = itemManager.geKeyTypedItems(typedValue);

        if (typedItemList != null && typedItemList.size() > 0) {


            Iterator it = typedItemList.iterator();

            Vector rows = new Vector();
            while (it.hasNext()) {

                Items item = (Items) it.next();

                Vector row = new Vector();

                row.add(item.getItemName());
                row.add(item.getItemCode());
                row.add(item.getSalesPrice());
                row.add(item.getItemType());

                rows.add(row);
            }

            fndItemsTable.setModel(new DefaultTableModel(rows, itemColumns) {

                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }
            });
            addItemBtn.setEnabled(true);
        } else {
            addItemBtn.setEnabled(false);

            fndItemsTable.setModel(new DefaultTableModel(null, itemColumns) {

                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }
            });
        }

    }//GEN-LAST:event_itemNameTFKeyReleased

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void noOfItemsTfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noOfItemsTfActionPerformed

        addItemToInvoice();
    }//GEN-LAST:event_noOfItemsTfActionPerformed

    private void fndItemsTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fndItemsTableKeyReleased

        int selectedRow = fndItemsTable.getSelectedRow();

        if (selectedRow != -1) {

            int tabKey = evt.getKeyCode();

            if (tabKey == 9) {
                noOfItemsTf.requestFocus();
            }
        }

    }//GEN-LAST:event_fndItemsTableKeyReleased

    private void itemNameTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemNameTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_itemNameTFActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                //new FindByItemNameFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addItemBtn;
    private javax.swing.JTable fndItemsTable;
    private javax.swing.JTextField itemNameTF;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField noOfItemsTf;
    // End of variables declaration//GEN-END:variables

    private boolean isNumber(String value) {

        try {

            double number = Double.parseDouble(value);
            return true;

        } catch (NumberFormatException ex) {

            return false;

        }

    }

    private void addItemToInvoice() {



        int selectedRow = fndItemsTable.getSelectedRow();

        if (selectedRow != -1) {


            String noOfItems = noOfItemsTf.getText();

            if (noOfItems != null && noOfItems.length() > 0) {

                if (isNumber(noOfItems)) {

                    String itemName = (String) fndItemsTable.getValueAt(selectedRow, 0);
                    Integer itemCode = (Integer) fndItemsTable.getValueAt(selectedRow, 1);
                    Double salesPrice = (Double) fndItemsTable.getValueAt(selectedRow, 2);
                    String itemType = (String) fndItemsTable.getValueAt(selectedRow, 3);

                    Items items = new Items();
                    items.setItemCode(itemCode);
                    items.setItemName(itemName);
                    items.setItemType(itemType);
                    items.setSalesPrice(salesPrice);

                    mainJFrame.loadItemsToNewTableFromFindItemName(items, noOfItems);
                    
                    itemNameTF.requestFocus();
                } else {
                    JOptionPane.showMessageDialog(this, "Please Enter Valid Format for the No Of Items", "Error", JOptionPane.ERROR_MESSAGE);
                    noOfItemsTf.requestFocus();
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please Enter No Of Items", "Error", JOptionPane.ERROR_MESSAGE);
                noOfItemsTf.requestFocus();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please Select Item in Table", "Error", JOptionPane.ERROR_MESSAGE);
            fndItemsTable.requestFocus();
        }
    }
}
